name: Build Preview App

permissions:
  contents: write

on:
  schedule:
    - cron: '0 6 * * 2'
  workflow_dispatch:

jobs:
  check-updates:
    runs-on: ubuntu-latest
    env:
      CI: true
    outputs:
      SHOULD_RUN: ${{ steps.compare.outputs.SHOULD_RUN }}
      LATEST_SHA: ${{ steps.compare.outputs.LATEST_SHA }}
      LAST_SHA: ${{ steps.compare.outputs.LAST_SHA }}

    steps:
      - name: Checkout Repository
        run: |
          rm -rf * .[^.] .??*
          git clone --branch dev https://git.rebelonion.dev/rebelonion/Dantotsu.git .

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          repo: 'Dantotsu-Bot/Dantotsu-Builder'
          workflow: release.yml
          name: last-sha
          path: .
        continue-on-error: true

      - name: Check for updates
        id: compare
        run: |
          LATEST_SHA=$(git rev-parse HEAD)
          echo "Latest commit SHA: $LATEST_SHA"
          echo "LATEST_SHA=${LATEST_SHA}" >> $GITHUB_OUTPUT

          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
            echo "Last saved commit SHA: $LAST_SHA"
            echo "LAST_SHA=${LAST_SHA}" >> $GITHUB_OUTPUT
          else
            LAST_SHA=""
            echo "No previous SHA found."
            echo "LAST_SHA=${LAST_SHA}" >> $GITHUB_OUTPUT
          fi

          if [ "$LATEST_SHA" == "$LAST_SHA" ]; then
            echo "No updates found. Canceling the workflow."
            echo "SHOULD_RUN=false" >> $GITHUB_OUTPUT
          else
            echo "Updates found. Continuing workflow."
            echo "SHOULD_RUN=true" >> $GITHUB_OUTPUT
          fi

      - name: Save Current SHA for Next Run
        run: git rev-parse HEAD > last_sha.txt

      - name: Upload Current SHA as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt

  build:
    runs-on: ubuntu-latest
    needs: check-updates
    if: ${{ needs.check-updates.outputs.SHOULD_RUN == 'true' }}
    env:
      CI: true
      SKIP_BUILD: false

    steps:
      - name: Checkout Repository
        run: |
          rm -rf * .[^.] .??*
          git clone --branch dev https://git.rebelonion.dev/rebelonion/Dantotsu.git .

      - name: Get Commits Since Last Run
        run: |
          if [ "${{ needs.check-updates.outputs.LAST_SHA }}" != "" ]; then
            LAST_SHA=${{ needs.check-updates.outputs.LAST_SHA }}
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"● %s ~%an [֍](https://github.com/rebelonion/Dantotsu/commit/%H)" --max-count=10)
          if [ -z "$COMMIT_LOGS" ]; then
            COMMIT_LOGS="● No new commits since last release"
          fi
          REPO_URL="https://github.com/rebelonion/Dantotsu/pull"
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E "s@#([0-9]+)@[#\1](${REPO_URL}/\1)@g")
          echo -e "Commits:\n" > commit_log.txt
          echo "$COMMIT_LOGS" | sed 's/●/\n●/g' | sed '/^$/d' >> commit_log.txt
          echo "Raw COMMIT_LOGS:"
          cat commit_log.txt
        shell: bash
        env:
          CI: true
        continue-on-error: true

      - name: Set variables
        run: |
          VER=$(grep -E -o "versionName \".*\"" app/build.gradle | sed -e 's/versionName //g' | tr -d '"')
          SHA=${{ github.sha }}
          VERSION="$VER+${SHA:0:7}"
          echo "Version $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: List files in the directory
        run: ls -l

      - name: Setup JDK 17
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      - name: Decode Keystore File
        if: ${{ env.SKIP_BUILD != 'true' }}
        run: echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > $GITHUB_WORKSPACE/key.keystore

      - name: Make gradlew executable
        if: ${{ env.SKIP_BUILD != 'true' }}
        run: chmod +x ./gradlew

      - name: Build with Gradle
        if: ${{ env.SKIP_BUILD != 'true' }}
        run: |
          ./gradlew assembleGoogleRelease \
            -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/key.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Verify APK Output
        if: ${{ env.SKIP_BUILD != 'true' }}
        run: |
          echo "Listing APK files in app/build/outputs/apk/google/release:"
          ls -l app/build/outputs/apk/google/release/
          if [ ! -f app/build/outputs/apk/google/release/app-google-universal-release.apk ]; then
            echo "Universal APK not found!"
            exit 1
          fi
          SPLIT_APKS=$(ls app/build/outputs/apk/google/release/app-google-*-release.apk 2>/dev/null | grep -v app-google-universal-release.apk || true)
          if [ -z "$SPLIT_APKS" ]; then
            echo "No split APKs found!"
            exit 1
          fi
          echo "Split APKs found:"
          echo "$SPLIT_APKS"

      - name: Calculate SHA256 Checksums and Set Environment Variables
        if: ${{ env.SKIP_BUILD != 'true' }}
        run: |
          echo "Calculating SHA256 checksums for APKs..."
          UNIVERSAL_SHA=$(sha256sum app/build/outputs/apk/google/release/app-google-universal-release.apk | cut -d ' ' -f 1)
          echo "APK_UNIVERSAL_SHA=${UNIVERSAL_SHA}" >> $GITHUB_ENV
          echo "Universal APK SHA256: ${UNIVERSAL_SHA}"
          for apk in app/build/outputs/apk/google/release/app-google-*-release.apk; do
            if [[ "$apk" != *"universal"* ]]; then
              filename=$(basename "$apk")
              echo "Processing: $filename"
              if [[ "$filename" =~ app-google-([^-]+(-[^-]+)*)-release\.apk ]]; then
                arch="${BASH_REMATCH[1]}"
                checksum=$(sha256sum "$apk" | cut -d ' ' -f 1)
                arch_var=$(echo "${arch}" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
                echo "APK_${arch_var}_SHA=${checksum}" >> $GITHUB_ENV
                echo "${arch} APK SHA256: ${checksum}"
                echo "Environment variable: APK_${arch_var}_SHA"
              else
                echo "Warning: Could not extract architecture from $filename"
              fi
            fi
          done

      - name: Append Checksums to Commit Log
        if: ${{ env.SKIP_BUILD != 'true' }}
        run: |
          echo -e "\n---\n" >> commit_log.txt
          echo -e "### Checksums\n" >> commit_log.txt
          echo "| Variant | SHA-256 |" >> commit_log.txt
          echo "| ------- | ------- |" >> commit_log.txt
          echo "| Universal | ${{ env.APK_UNIVERSAL_SHA }} |" >> commit_log.txt
          echo "| arm64-v8a | ${{ env.APK_ARM64_V8A_SHA }} |" >> commit_log.txt
          echo "| armeabi-v7a | ${{ env.APK_ARMEABI_V7A_SHA }} |" >> commit_log.txt
          echo "| x86 | ${{ env.APK_X86_SHA }} |" >> commit_log.txt
          echo "| x86_64 | ${{ env.APK_X86_64_SHA }} |" >> commit_log.txt
          echo "Updated commit_log.txt with checksums:"
          cat commit_log.txt
        shell: bash

      - name: Upload APKs as Build Artifacts
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: Dantotsu-APKs
          retention-days: 5
          compression-level: 9
          path: |
            app/build/outputs/apk/google/release/app-google-universal-release.apk
            app/build/outputs/apk/google/release/app-google-arm64-v8a-release.apk
            app/build/outputs/apk/google/release/app-google-armeabi-v7a-release.apk
            app/build/outputs/apk/google/release/app-google-x86-release.apk
            app/build/outputs/apk/google/release/app-google-x86_64-release.apk

      - name: Create GitHub Release
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Dantotsu v${{ env.VERSION }}
          body_path: commit_log.txt
          files: |
            app/build/outputs/apk/google/release/app-google-universal-release.apk
            app/build/outputs/apk/google/release/app-google-arm64-v8a-release.apk
            app/build/outputs/apk/google/release/app-google-armeabi-v7a-release.apk
            app/build/outputs/apk/google/release/app-google-x86-release.apk
            app/build/outputs/apk/google/release/app-google-x86_64-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Commit Log as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: commit-log
          path: commit_log.txt
